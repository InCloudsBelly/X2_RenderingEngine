#pragma once

layout(std140, binding = 0) uniform Camera
{
	mat4 ViewProjectionMatrix;
	mat4 InverseViewProjectionMatrix;
	mat4 ProjectionMatrix;
	mat4 InverseProjectionMatrix;
	mat4 ViewMatrix;
	mat4 InverseViewMatrix;
	vec2 NDCToViewMul;
	vec2 NDCToViewAdd;
	vec2 DepthUnpackConsts;
	vec2 CameraTanHalfFOV;
} u_Camera;

layout (std140, binding = 1) uniform ShadowData 
{
	mat4 DirLightMatrices[4];
} u_DirShadow;

struct DirectionalLight
{
	vec3 Direction;
	float ShadowAmount;
	vec3 Radiance;  
	float Multiplier;
};

layout(std140, binding = 2) uniform SceneData
{
	DirectionalLight DirectionalLights;
	vec3 CameraPosition; // Offset = 32
	float EnvironmentMapIntensity;
} u_Scene;


layout(std140, binding = 3) uniform RendererData
{
	uniform vec4 CascadeSplits;
	uniform int TilesCountX;
	uniform bool ShowCascades;
	uniform bool SoftShadows;
	uniform float LightSize;
	uniform float MaxShadowDistance;
	uniform float ShadowFade;
	uniform bool CascadeFading;
	uniform float CascadeTransitionFade;
	uniform bool ShowLightComplexity;
} u_RendererData;

layout(std140, binding = 17) uniform ScreenData
{
    vec2 InvFullResolution;
    vec2 FullResolution;
	vec2 InvHalfResolution;
    vec2 HalfResolution;
} u_ScreenData;


layout(std140, binding = 18) uniform HBAOData
{
	vec4	PerspectiveInfo;
	vec2    InvQuarterResolution;
	float   RadiusToScreen;
	float   NegInvR2;
	float   NDotVBias;
	float   AOMultiplier;
	float   PowExponent;
	bool	IsOrtho;
	vec4    Float2Offsets[16];
	vec4    Jitters[16];
	vec3	Padding;
	float	ShadowTolerance;
} u_HBAO;

struct SMAAParameters {
	float threshold;
	float depthThreshold;
	uint  maxSearchSteps;
	uint  maxSearchStepsDiag;

	uint  cornerRounding;
	uint  pad0;
	uint  pad1;
	uint  pad2;
};

layout(std140, binding = 24) uniform SMAAUBO
{
	SMAAParameters  smaaParameters;

	vec4 subsampleIndices;

	float predicationThreshold;
	float predicationScale;
	float predicationStrength;
	float reprojWeigthScale;

} u_SMAA;


layout(std140, binding = 25) uniform TAAUBO
{
	mat4 ViewProjectionMatrixHistory;
	mat4 JitterdViewProjection;
	mat4 InvJitteredProjection;
	vec2 jitter;
	float feedback;
} u_TAA;


struct FogVolume
{
	vec3 position;
	vec3 extent;
	mat4 localToWorld;
	mat4 worldToLocal;
};

layout(std140, binding = 26) uniform RayMarcingUBO
{
	vec4 bias_near_far_pow;
	vec4 aniso_density_scattering_absorption;
	vec4 frustumRays[4];

	vec4 windDir_Speed;
	vec4 fogParams;
	
	uint FogVolumeCount;
	FogVolume FogVolumes[100];

} u_RayMarching;




struct PointLight
{
	vec3 Position;
	float Multiplier;
	vec3 Radiance;
	float MinRadius;
	float Radius;
	float Falloff;
	float LightSize;
	bool CastsShadows;
};

layout(std140, binding = 4) uniform PointLightData
{
	uint LightCount;
	PointLight Lights[1000];
} u_PointLights;

struct SpotLight
{
	vec3 Position;
	float Multiplier;
	vec3 Direction;
	float AngleAttenuation;
	vec3 Radiance;
	float Range;
	float Angle;
	float Falloff;
	bool SoftShadows;
	bool CastsShadows;
};

layout(std140, binding = 19) uniform SpotLightData
{
	uint LightCount;
	SpotLight Lights[1024];
} u_SpotLights;

layout(std140, binding = 20) uniform SpotShadowData
{
	mat4 Mats[1024];
} u_SpotLightMatrices;

layout(std430, binding = 14) buffer VisiblePointLightIndicesBuffer
{
	int Indices[];
} s_VisiblePointLightIndicesBuffer;

layout(std430, binding = 23) writeonly buffer VisibleSpotLightIndicesBuffer
{
	int Indices[];
} s_VisibleSpotLightIndicesBuffer;

