
#pragma once

#if defined(__FRAGMENT_STAGE__) || defined(__COMPUTE_STAGE__)
#include <Buffers.glslh>
#include <Lighting.glslh>

/////////////////////////////////////////////
// PCSS
/////////////////////////////////////////////

float ShadowFade = 1.0; //TODO(Karim): A better placement of this?

vec3 GetShadowMapCoords(vec3 shadowMapCoords[4], uint cascade)
{
	// NOTE(Yan): this exists because AMD doesn't seem to like indexing of varyings (causes artifacts)
	switch (cascade)
	{
		case 0: return shadowMapCoords[0];
		case 1: return shadowMapCoords[1];
		case 2: return shadowMapCoords[2];
		case 3: return shadowMapCoords[3];
	}
	return vec3(0.0f);
}

float GetDirShadowBias()
{
	const float MINIMUM_SHADOW_BIAS = 0.002;
	float bias = max(MINIMUM_SHADOW_BIAS * (1.0 - dot(m_Params.Normal, -u_Scene.DirectionalLights.Direction)), MINIMUM_SHADOW_BIAS);
	return bias;
}

float HardShadows_DirectionalLight(sampler2DArray shadowMap, uint cascade, vec3 shadowCoords)
{
	float bias = GetDirShadowBias();
	float shadowMapDepth = texture(shadowMap, vec3(shadowCoords.xy * 0.5 + 0.5, cascade)).x;
	return step(shadowCoords.z, shadowMapDepth + bias) * ShadowFade;
}

// Penumbra
// this search area estimation comes from the following article: 
// http://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf
float SearchWidth(float uvLightSize, float receiverDistance)
{
	const float NEAR = 0.1;
	return uvLightSize * (receiverDistance - NEAR) / u_Scene.CameraPosition.z;
}

float SearchRegionRadiusUV(float zWorld)
{
	const float light_zNear = 0.0; // 0.01 gives artifacts? maybe because of ortho proj?
	const float lightRadiusUV = 0.05;
	return lightRadiusUV * (zWorld - light_zNear) / zWorld;
}

const vec2 PoissonDistribution[64] = vec2[](
	vec2(-0.94201624, -0.39906216),
	vec2(0.94558609, -0.76890725),
	vec2(-0.094184101, -0.92938870),
	vec2(0.34495938, 0.29387760),
	vec2(-0.91588581, 0.45771432),
	vec2(-0.81544232, -0.87912464),
	vec2(-0.38277543, 0.27676845),
	vec2(0.97484398, 0.75648379),
	vec2(0.44323325, -0.97511554),
	vec2(0.53742981, -0.47373420),
	vec2(-0.26496911, -0.41893023),
	vec2(0.79197514, 0.19090188),
	vec2(-0.24188840, 0.99706507),
	vec2(-0.81409955, 0.91437590),
	vec2(0.19984126, 0.78641367),
	vec2(0.14383161, -0.14100790),
	vec2(-0.413923, -0.439757),
	vec2(-0.979153, -0.201245),
	vec2(-0.865579, -0.288695),
	vec2(-0.243704, -0.186378),
	vec2(-0.294920, -0.055748),
	vec2(-0.604452, -0.544251),
	vec2(-0.418056, -0.587679),
	vec2(-0.549156, -0.415877),
	vec2(-0.238080, -0.611761),
	vec2(-0.267004, -0.459702),
	vec2(-0.100006, -0.229116),
	vec2(-0.101928, -0.380382),
	vec2(-0.681467, -0.700773),
	vec2(-0.763488, -0.543386),
	vec2(-0.549030, -0.750749),
	vec2(-0.809045, -0.408738),
	vec2(-0.388134, -0.773448),
	vec2(-0.429392, -0.894892),
	vec2(-0.131597, 0.065058),
	vec2(-0.275002, 0.102922),
	vec2(-0.106117, -0.068327),
	vec2(-0.294586, -0.891515),
	vec2(-0.629418, 0.379387),
	vec2(-0.407257, 0.339748),
	vec2(0.071650, -0.384284),
	vec2(0.022018, -0.263793),
	vec2(0.003879, -0.136073),
	vec2(-0.137533, -0.767844),
	vec2(-0.050874, -0.906068),
	vec2(0.114133, -0.070053),
	vec2(0.163314, -0.217231),
	vec2(-0.100262, -0.587992),
	vec2(-0.004942, 0.125368),
	vec2(0.035302, -0.619310),
	vec2(0.195646, -0.459022),
	vec2(0.303969, -0.346362),
	vec2(-0.678118, 0.685099),
	vec2(-0.628418, 0.507978),
	vec2(-0.508473, 0.458753),
	vec2(0.032134, -0.782030),
	vec2(0.122595, 0.280353),
	vec2(-0.043643, 0.312119),
	vec2(0.132993, 0.085170),
	vec2(-0.192106, 0.285848),
	vec2(0.183621, -0.713242),
	vec2(0.265220, -0.596716),
	vec2(-0.009628, -0.483058),
	vec2(-0.018516, 0.435703)
	);

const vec2 poissonDisk[16] = vec2[](
	vec2(-0.94201624, -0.39906216),
	vec2(0.94558609, -0.76890725),
	vec2(-0.094184101, -0.92938870),
	vec2(0.34495938, 0.29387760),
	vec2(-0.91588581, 0.45771432),
	vec2(-0.81544232, -0.87912464),
	vec2(-0.38277543, 0.27676845),
	vec2(0.97484398, 0.75648379),
	vec2(0.44323325, -0.97511554),
	vec2(0.53742981, -0.47373420),
	vec2(-0.26496911, -0.41893023),
	vec2(0.79197514, 0.19090188),
	vec2(-0.24188840, 0.99706507),
	vec2(-0.81409955, 0.91437590),
	vec2(0.19984126, 0.78641367),
	vec2(0.14383161, -0.14100790)
	);

vec2 SamplePoisson(int index)
{
	return PoissonDistribution[index % 64];
}

/////////////////////////////////////////////
// Directional Shadows
/////////////////////////////////////////////

float FindBlockerDistance_DirectionalLight(sampler2DArray shadowMap, uint cascade, vec3 shadowCoords, float uvLightSize)
{
	float bias = GetDirShadowBias();

	int numBlockerSearchSamples = 64;
	int blockers = 0;
	float avgBlockerDistance = 0;

	float searchWidth = SearchRegionRadiusUV(shadowCoords.z);
	for (int i = 0; i < numBlockerSearchSamples; i++)
	{
		float z = textureLod(shadowMap, vec3((shadowCoords.xy * 0.5 + 0.5) + SamplePoisson(i) * searchWidth, cascade), 0).r;
		if (z < (shadowCoords.z - bias))
		{
			blockers++;
			avgBlockerDistance += z;
		}
	}

	if (blockers > 0)
		return avgBlockerDistance / float(blockers);

	return -1;
} 

float PCF_DirectionalLight(sampler2DArray shadowMap, uint cascade, vec3 shadowCoords, float uvRadius)
{
	float bias = GetDirShadowBias();
	int numPCFSamples = 64;

	float sum = 0;
	for (int i = 0; i < numPCFSamples; i++)
	{
		vec2 offset = SamplePoisson(i) * uvRadius;
		float z = textureLod(shadowMap, vec3((shadowCoords.xy * 0.5 + 0.5) + offset, cascade), 0).r;
		sum += step(shadowCoords.z - bias, z);
	}
	return sum / numPCFSamples;
}

float NV_PCF_DirectionalLight(sampler2DArray shadowMap, uint cascade, vec3 shadowCoords, float uvRadius)
{
	float bias = GetDirShadowBias();

	float sum = 0;
	for (int i = 0; i < 16; i++)
	{
		vec2 offset = poissonDisk[i] * uvRadius;
		float z = textureLod(shadowMap, vec3((shadowCoords.xy * 0.5 + 0.5) + offset, cascade), 0).r;
		sum += step(shadowCoords.z - bias, z);
	}
	return sum / 16.0f;
}

float PCSS_DirectionalLight(sampler2DArray shadowMap, uint cascade, vec3 shadowCoords, float uvLightSize)
{
	float blockerDistance = FindBlockerDistance_DirectionalLight(shadowMap, cascade, shadowCoords, uvLightSize);
	if (blockerDistance == -1) // No occlusion
		return 1.0f;

	float penumbraWidth = (shadowCoords.z - blockerDistance) / blockerDistance;

	float NEAR = 0.01; // Should this value be tweakable?
	float uvRadius = penumbraWidth * uvLightSize * NEAR / shadowCoords.z; // Do we need to divide by shadowCoords.z?
	uvRadius = min(uvRadius, 0.002f);
	return PCF_DirectionalLight(shadowMap, cascade, shadowCoords, uvRadius) * ShadowFade;
} 

/////////////////////////////////////////////
// Spot light Shadows
/////////////////////////////////////////////

const float SPOT_SHADOW_BIAS = 0.00025f;

float HardShadows_SpotLight(sampler2DArray shadowMap, uint lightIndex, vec3 shadowCoords)
{
	float shadowMapDepth = textureLod(shadowMap, vec3(shadowCoords.xy, lightIndex), 0).x;
	return step(shadowCoords.z, shadowMapDepth + SPOT_SHADOW_BIAS);
}

float FindBlockerDistance_SpotLight(sampler2DArray shadowMap, uint lightIndex, vec3 shadowCoords, float uvLightSize)
{
	int numBlockerSearchSamples = 16;
	int blockers = 0;
	float avgBlockerDistance = 0;

	float searchWidth = SearchRegionRadiusUV(shadowCoords.z);
	searchWidth = 0.01;
	for (int i = 0; i < numBlockerSearchSamples; i++)
	{
		float z = textureLod(shadowMap, vec3(shadowCoords.xy + SamplePoisson(i) * searchWidth, lightIndex), 0).r;
		if (z < (shadowCoords.z - SPOT_SHADOW_BIAS))
		{
			blockers++;
			avgBlockerDistance += z;
		}
	}

	if (blockers > 0)
		return avgBlockerDistance / float(blockers);

	return -1;
}


float PCF_SpotLight(sampler2DArray shadowMap, uint lightIndex, vec3 shadowCoords, float uvRadius)
{
	int numPCFSamples = 64;

	float sum = 0;
	for (int i = 0; i < numPCFSamples; i++)
	{
		vec2 offset = SamplePoisson(i) * uvRadius;
		float z = textureLod(shadowMap, vec3((shadowCoords.xy) + offset, lightIndex), 0).r;
		sum += step(shadowCoords.z - SPOT_SHADOW_BIAS, z);
	}
	return sum / float(numPCFSamples);
}


float PCSS_SpotLight(sampler2DArray shadowMap, uint lightIndex, vec3 shadowCoords, float uvLightSize)
{
	float blockerDistance = FindBlockerDistance_SpotLight(shadowMap, lightIndex, shadowCoords, uvLightSize);
	if (blockerDistance == -1) // No occlusion
		return 1.0f;

	float penumbraWidth = (shadowCoords.z - blockerDistance) / blockerDistance;

	float NEAR = 1.0; // Should this value be tweakable?
	float uvRadius = penumbraWidth * uvLightSize * NEAR / shadowCoords.z; // Do we need to divide by shadowCoords.z?
	uvRadius = min(uvRadius, 0.002f);
	return PCF_SpotLight(shadowMap, lightIndex, shadowCoords, uvRadius);
}

float SpotShadowCalculation(sampler2DArray SpotAtlas, vec3 worldPos)
{
	float shadow = 1.0;
	for (int i = 0; i < u_SpotLights.LightCount; ++i)
	{
		int lightIndex = GetSpotLightBufferIndex(i); 
		if (lightIndex == -1)
			break;
	
		SpotLight light = u_SpotLights.Lights[lightIndex];
		if(!light.CastsShadows)
			continue;

		// NOTE(Yan): Mats[0] because we only support ONE shadow casting spot light at the moment and it MUST be index 0
		vec4 coords = u_SpotLights.Mats[0] * vec4(worldPos, 1.0f);
		vec3 shadowMapCoords = (coords.xyz / coords.w);
		shadowMapCoords.xy = shadowMapCoords.xy * 0.5 + 0.5;
		if (any(lessThan(shadowMapCoords.xyz, vec3(0.0f))) || any(greaterThan(shadowMapCoords.xyz, vec3(1.0f))))
			continue;

		shadow *= light.SoftShadows ? PCSS_SpotLight(SpotAtlas, lightIndex, shadowMapCoords, light.Falloff) : HardShadows_SpotLight(SpotAtlas, lightIndex, shadowMapCoords);
	}

	return shadow;
}

float SpotShadowCalculationByIndex(sampler2DArray SpotAtlas, vec3 worldPos, int lightIndex)
{
	float shadow = 1.0;

	SpotLight light = u_SpotLights.Lights[lightIndex];
	if(!light.CastsShadows)
		return shadow;

	vec4 coords = u_SpotLights.Mats[lightIndex] * vec4(worldPos, 1.0f);
	vec3 shadowMapCoords = (coords.xyz / coords.w);
	shadowMapCoords.xy = shadowMapCoords.xy * 0.5 + 0.5;
	if (any(lessThan(shadowMapCoords.xyz, vec3(0.0f))) || any(greaterThan(shadowMapCoords.xyz, vec3(1.0f))))
		return shadow;
	
	shadow *= light.SoftShadows ? PCSS_SpotLight(SpotAtlas, lightIndex, shadowMapCoords, light.Falloff) : HardShadows_SpotLight(SpotAtlas, lightIndex, shadowMapCoords);

	return shadow;
}

/////////////////////////////////////////////
// Point light Shadows
/////////////////////////////////////////////

const float POINT_SHADOW_BIAS = 0.1f; // linear Distance bias

float getPostiveLinearDepth(float depth, float n, float f)
{
	float fsubn = f - n; 
	return -(2 * f * n)/fsubn / (depth - (f+ n) / fsubn); 
}

float PointShadowCalculationByIndex(samplerCubeArray PointShadowAtlas, vec3 worldPos, int lightIndex)
{
	float shadow = 1.0;

	PointLight light = u_PointLights.Lights[lightIndex];
	if(!light.CastsShadows)
		return shadow;

	vec3 sampleDir = worldPos - light.Position;
	float distance = length(sampleDir);
	float cloestDepth = texture(PointShadowAtlas, vec4(sampleDir, lightIndex)).r;
	

	float f = light.Radius;
	float n = 0.1f;  // point light projection  Nearplane is now hard coded to 0.1f;
	
	float linear_depth = getPostiveLinearDepth(cloestDepth, n, f);
	float sampledDistance = distance / max(abs(sampleDir.x), max(abs(sampleDir.y),abs(sampleDir.z))) * linear_depth;
	if(distance - POINT_SHADOW_BIAS >sampledDistance )
		shadow = 0.0f;
	
	return shadow;
}

#endif // defined(__FRAGMENT_STAGE) || defined(__COMPUTE_STAGE)
